#define HEADER_TITLE "Ball - 6"    // class, spawn, col
#include "header.ceu"

#define DCL_INT(a,v)                \
    var Integral_Over_Time _ with   \
        this.accumulator = a;       \
        this.value       = v;       \
    end

class Integral_Over_Time with
    var float& accumulator;
    var float& value;
do
    every dt in SDL_DT do
        accumulator = accumulator + value * dt/1000.0;
    end
end

class Move_Until_Button with
    var int button;
    var float& pos;
    var float v0, a0;
do
    DCL_INT(v0,  a0);
    DCL_INT(pos, v0);

    await 2s;

    if button == 0 then
        await (500+_rand()%3000) ms;
    else
        var _SDL_MouseButtonEvent&& but =
            await SDL_MOUSEBUTTONDOWN
                until but:button == button;
    end
end

data Ball with
    var float x;
    var float y;
    var float radius;
end

class Player with
    var bool is_npc;
    var Ball ball;
    var int  button;
do
    var int pts_tot = 0;
    var int pts_nxt = 0;
    var SDL_Point[TRAIL_N] pts;
    loop i in $$pts do
        var SDL_Point pt = SDL_Point(0,0);
        pts = []..pts..[pt];
    end

    par do
        await SDL_MOUSEBUTTONDOWN;
        loop do
            do Move_Until_Button with
                this.button = outer.button;
                this.pos = ball.x;
                this.v0  = 20;
                this.a0  = 20;
            end;
            do Move_Until_Button with
                this.button = outer.button;
                this.pos = ball.y;
                this.v0  = 20;
                this.a0  = 20;
            end;
            do Move_Until_Button with
                this.button = outer.button;
                this.pos = ball.x;
                this.v0  = -20;
                this.a0  = -20;
            end;
            do Move_Until_Button with
                this.button = outer.button;
                this.pos = ball.y;
                this.v0  = -20;
                this.a0  = -20;
            end;
        end
    with
        every TRAIL_MS ms do
            pts[pts_nxt].x = ball.x;
            pts[pts_nxt].y = ball.y;
            pts_nxt = (pts_nxt + 1) % TRAIL_N;
            if pts_tot < TRAIL_N then
                pts_tot = pts_tot + 1;
            end
        end
    with
        every SDL_REDRAW do
            loop/TRAIL_N i in pts_tot do
                _filledCircleRGBA(_REN, pts[i].x, pts[i].y, 3,
                                       0xBB,0xBB,0xBB,0xFF);
            end

            var int clr;
            if this.is_npc then
                clr = 0x88;
            else
                clr = 0x00;
            end
            _filledCircleRGBA(_REN, (int)ball.x, (int)ball.y, (int)ball.radius,
                                   clr,clr,clr,0xFF);
        end
    end
end

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN, 0xFF,0xFF,0xFF,0xFF);
        _SDL_RenderFillRect(_REN, null);
    end
with
    loop do
        pool Player[] players;
        var Player&&? p1 = spawn Player in players with
            this.is_npc = false;
            this.ball   = Ball(200,130,8);
            this.button = _SDL_BUTTON_LEFT;
        end;

        watching *p1 do

            var Player&&? p2 = spawn Player in players with
                this.is_npc = false;
                this.ball   = Ball(300,130,8);
                this.button = _SDL_BUTTON_RIGHT;
            end;

            watching *p2 do

                par do
                    every 5s do
                        spawn Player in players with
                            this.is_npc = true;
                            this.ball   = Ball(50+_rand()%400, 50+_rand()%400, 8);
                            this.button = 0;
                        end;
                    end
                with
                    every SDL_DT do
                        loop tmp1 in players do
                            watching *tmp1 do
                                if tmp1:ball.x>640 or tmp1:ball.x<0 or
                                   tmp1:ball.y>480 or tmp1:ball.y<0
                                then
                                    kill *tmp1;
                                end
                                loop tmp2 in players do
                                    var SDL_Point pt1 = SDL_Point(tmp1:ball.x,tmp1:ball.y);
                                    var SDL_Point pt2 = SDL_Point(tmp2:ball.x,tmp2:ball.y);
                                    if tmp1 != tmp2 and
                                       _SDL_Circle_vs_Circle((_SDL_Point&&)&pt1,8,(_SDL_Point&&)&pt2,8)
                                    then
                                        watching *tmp2 do
                                            kill *tmp1;
                                            kill *tmp2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
with
    #include "click.ceu"
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

escape 0;
