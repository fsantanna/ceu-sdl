#define HEADER_TITLE "Birds - 12 (blinking)"
#include "header.ceu"

#ifdef CEU_TIMEMACHINE
global do
#endif

native do
    SDL_Texture* TEX_UP, *TEX_DOWN;
end
    finalize
        _TEX_UP = _IMG_LoadTexture(_REN, "strangeloop-14/clumsy_up.png");
    with
        _SDL_DestroyTexture(_TEX_UP);
    end
    finalize
        _TEX_DOWN = _IMG_LoadTexture(_REN, "strangeloop-14/clumsy_down.png");
    with
        _SDL_DestroyTexture(_TEX_DOWN);
    end

#ifdef CEU_TIMEMACHINE
end
#endif

#define PI 3.14

class Bird with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
    var int speed;
    event void go_collide;
do
    this.r.x = 20;
    this.r.w = 50;
    this.r.h = 45;

    var bool is_visible = true;

    var float sin = 0;
    par/or do
        var bool is_dead =
            par do
                var int y = r.y;
                var int dt;
                var float x = r.x;
                every dt in SDL_DT do
                    var float v = dt*speed;
                    x = x + v/1000;
                    r.x = x;
                    r.y = y + speed/5*_sin(sin);
                    sin = sin + PI*v/100000;
                    if r.x > 580 then
                        escape false;
                    end
                end
            with
                await this.go_collide;
                escape true;
            end;

        if is_dead then
            var int dt;
            var float y = r.y;
            every dt in SDL_DT do
                y = y + dt*0.5;
                r.y = y;
                if r.y >= 400 then
                    r.y = 400;
                    break;
                end
            end

            par/or do
                await 1s;
            with
                every 100ms do
                    is_visible = not is_visible;
                end
            end
        end
    with
        every SDL_REDRAW do
            if is_visible then
                if ((int)((sin+PI/2)/PI)) % 2 == 0 then
                    _SDL_RenderCopy(&ren, _TEX_DOWN, null, &r);
                else
                    _SDL_RenderCopy(&ren, _TEX_UP, null, &r);
                end
            end
        end
    end
end

par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN, 0x00,0x00,0x00, 0xFF);
        _SDL_RenderFillRect(_REN, null);
    end
with
    loop do
#ifdef CEU_TIMEMACHINE
        pool Bird[100] birds;
#else
        pool Bird[] birds;
#endif
        par/or do
            every 750ms do
                spawn Bird in birds with
                    this.ren   = &_ID(_REN);
#ifdef CEU_TIMEMACHINE
                    this.r.y   =  20 + _drand()%350;
                    this.speed = 100 + _drand()%100;
#else
                    this.r.y   =  20 + _rand()%350;
                    this.speed = 100 + _rand()%100;
#endif
                end;
            end
        with
            every SDL_DT do
                loop b1 in birds do
                    loop b2 in birds do
                        if b1!=b2 and _SDL_HasIntersection(&b1:r,&b2:r) then
                            emit b1:go_collide;
                            emit b2:go_collide;
                        end
                    end
                end
            end
        with
            await SDL_MOUSEBUTTONDOWN;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
with
    await SDL_QUIT;
end

escape 0;
