#define HEADER_TITLE "Birds - 06 (dynamic-reclamation)"
#include "header.ceu"

#ifdef CEU_TIMEMACHINE
global do
#endif

native do
    SDL_Texture* TEX_UP, *TEX_DOWN;
end
    finalize
        _TEX_UP = _IMG_LoadTexture(_REN, "strangeloop-14/clumsy_up.png");
    with
        _SDL_DestroyTexture(_TEX_UP);
    end
    finalize
        _TEX_DOWN = _IMG_LoadTexture(_REN, "strangeloop-14/clumsy_down.png");
    with
        _SDL_DestroyTexture(_TEX_DOWN);
    end

#ifdef CEU_TIMEMACHINE
end
#endif

#define PI 3.14

class Bird with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
    var int speed;
do
    this.r.x = 20;
    this.r.w = 50;
    this.r.h = 45;

    var float sin = 0;
    par/or do
        var int y = r.y;
        var float x = r.x;
        loop do
            var int dt = await SDL_DT;
            var float v = dt*speed;
            x = x + v/1000;
            r.x = x;
            r.y = y + speed/5*_sin(sin);
            sin = sin + PI*v/100000;
            if r.x > 580 then
                break;
            end
        end
    with
        every SDL_REDRAW do
            if ((int)((sin+PI/2)/PI)) % 2 == 0 then
                _SDL_RenderCopy(&&ren, _TEX_DOWN, null, &&r);
            else
                _SDL_RenderCopy(&&ren, _TEX_UP, null, &&r);
            end
        end
    end
end

par/or do
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN, 0x00,0x00,0x00, 0xFF);
        _SDL_RenderFillRect(_REN, null);
    end
with
#ifdef CEU_TIMEMACHINE
    pool Bird[100] birds;
#else
    pool Bird[] birds;
#endif
    every 1s do
        spawn Bird in birds with
            this.ren   = &_ID(_REN);
#ifdef CEU_TIMEMACHINE
            this.r.y   =  20 + _drand()%350;
            this.speed = 100 + _drand()%100;
#else
            this.r.y   =  20 + _rand()%350;
            this.speed = 100 + _rand()%100;
#endif
        end;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
with
    await SDL_QUIT;
end

escape 0;
