#define HEADER_TITLE "40k trails"
#include "header.ceu"

native do
    //int ORGS = 0;       // count the number of alive rectangles
end

/* Maximum of 10k Rectangles on a dedicated memory pool */

class Rect with
    var _SDL_Rect  rct;        // My initial values
    var int        vel;        // I have a speed set from outside
    var _SDL_Renderer& ren;    // I redraw myself
do
    this.rct.w = 25;
    this.rct.h = 25;

    var int x = rct.x;

    /* count the number of alive rectangles */
/*
    _ORGS = _ORGS + 1;          // increment on init
        finalize with
            _ORGS = _ORGS - 1;  // decrement on finalization
        end;
*/

    var _SDL_Color clr;         // color varies periodically
        clr.r = 0xFF;
        clr.g = 0xFF;
        clr.b = 0xFF;

    par/or do
        every 100ms do
            this.rct.h = rct.h + _rand()%5 - 2;     // random height
            if rct.h <= 0 then
                rct.h = 1;
            end
            if rct.h >= 50 then
                rct.h = 50;
            end

            this.rct.w = rct.w + _rand()%5 - 2;     // random width
            if rct.w <= 0 then
                rct.w = 1;
            end
            if rct.w >= 50 then
                rct.w = 50;
            end

            clr.r = clr.r + _rand()%5 - 2;          // random r/g/b
            clr.g = clr.g + _rand()%5 - 2;
            clr.b = clr.b + _rand()%5 - 2;
        end
    with
        var s32 dt;
        var float fx = x;

        every dt in SDL_DT do
            fx = fx + (float)(this.vel*dt)/1000;    // update my position
            rct.x = fx;

            /* When the rectangle reaches the end of screen, escape the "every".
             * This will terminate the "par/or", which will terminate
             *  organism.
             * The "finalize" will also execute on termination.
             */
            if rct.x > 950 then
                //rct.x = 0;
                //fx = 0;
                break;
            end
        end
    with
        /* redraw myself every frame */
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&ren, clr.r,clr.g,clr.b,0xFF);
            _SDL_RenderFillRect(&ren, &rct);
        end
    end
end

par/or do
    await SDL_QUIT;                     // terminates everything
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(_REN, 0,0,0, 0xFF);
        _SDL_RenderFillRect(_REN, null);  // DRAW 1: clear screen
    end
with
    loop do
        par/or do
            await 30s;                  // kill all rectangles and restart
        with
            pool Rect[10000] rs;
/*
*/
/*
            do
                var Rect[500] _ with
                    this.vel   = 50 + _rand()%20;
                    this.rct.x = 50 + _rand()%930;
                    this.rct.y = _rand()%750;
                    this.ren   = _REN;
                end;
                loop i in 10000 do
                    spawn Rect in rs with
                        this.vel   = 50 + _rand()%20;
                        this.rct.x = 50 + _rand()%930;
                        this.rct.y = _rand()%750;
                        this.ren   = _REN;
                    end;
                end
                await FOREVER;
            end
*/
            do
                every 40ms do
                    loop i in 30 do       // create 30 rectangles every 40ms
                        spawn Rect in rs with
                            this.vel   = 50 + _rand()%20;
                            this.rct.x = 50;
                            this.rct.y = _rand()%750;
                            this.ren   = _REN;
                        end;
                    end
                end
            end                         // DRAW 2: (all rectangles react here)
        end
    end
/*
*/
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);        // DRAW 3: update screen
    end
with
    /* calculate FPS */
    loop do
        var int c = 0;
        par/or do
            every SDL_REDRAW do
                c = c + 1;
            end
        with
            await 1s;
        end
        //_printf("[FPS=%d] [orgs=%d]\n", c, _ORGS);
    end
end

await 1s;
_printf("term\n");

escape 0;
