#include "sdl.ceu"
#include "sdl-gfx.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input int    SDL_DT;

var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("Logo", _SDL_WINDOWPOS_CENTERED,
                                        _SDL_WINDOWPOS_CENTERED,
                                        400, 400,
                                        _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
    end

var int w, h;
_SDL_GetWindowSize(&win, &w, &h);
var SDL_Rect bg = SDL_Rect(0,0 , w,h);

var _SDL_Renderer&? ren;
    finalize
        ren = _SDL_CreateRenderer(&win, -1, 0);
    with
        _SDL_DestroyRenderer(&ren);
    end


    data Command with
        tag NOTHING;
    or
        tag ROTATE with
            var int angle;
        end
    or
        tag MOVE with
            var int pixels;
        end
    or
        tag SEQUENCE with
            var Command* one;
            var Command* two;
        end
    or
        tag REPEAT with
            var int            times;
            var Command* command;
        end
    end

    data Command with
        tag NOTHING;
    or
        tag AWAIT with
            var int ms;
        end
    or
        tag ROTATE with
            var int vel_angle;
        end
    or
        tag MOVE with
            var int vel_pixels;
        end
    or
        tag SEQUENCE with
            var Command* one;
            var Command* two;
        end
    or
        tag REPEAT with
            var int      times;
            var Command* command;
        end
    or
        tag PAROR with
            var Command* one;
            var Command* two;
        end
    end


    /*
        repeat 2
            rotate(45)
            move(100)
            rotate(-90)
            move(100)
            rotate(45)
            move(-100)
    */

    #define DO_1_SEC(something)       \
        Command.PAROR(                \
                something,            \
                Command.AWAIT(1000))

    #define SEQ8(a,b,c,d,e,f,g,h)     \
        Command.SEQUENCE(a,           \
            Command.SEQUENCE(b,       \
                Command.SEQUENCE(c,   \
                    <...>

    pool Command[] cmds =
        new SEQ8(
            Command.AWAIT(1000),
            DO_1_SEC(Command.MOVE(150)),
            Command.AWAIT(1000),
            DO_1_SEC(Command.ROTATE(140)),
            Command.AWAIT(1000),
            DO_1_SEC(Command.MOVE(100)),
            Command.AWAIT(1000),
            Command.PAROR(
                Command.AWAIT(20000),
                Command.PAROR(
                    Command.ROTATE(100),
                    Command.MOVE(200))));

    pool Command[] cmds =
        new Command.REPEAT(2,
            Command.SEQUENCE(
                Command.ROTATE(45),
                <...>


                Command.SEQUENCE(
                    Command.MOVE(100),
                    Command.SEQUENCE(
                        Command.ROTATE(-90),
                        Command.SEQUENCE(
                            Command.MOVE(100),
                            Command.SEQUENCE(
                                Command.ROTATE(45),
                                Command.MOVE(-100)))))));


    class Turtle with
        var SDL_Point pos;        // initial position
        var int       angle;    // initial angle
    do
        <...>     // code to continuously redraw the turtle
    end

    class TurtleTurn with
        var Turtle& turtle;
        var int     angle;
    do
        <...>     // code to manipulate the angle
    end

    class TurtleMove with
        var Turtle& turtle;
        var int     pixels;
    do
        <...>     // code to manipulate the position
    end

    var Turtle turtle with
        this.pos   = SDL_Point(200,200);
        this.angle = 180;
    end;

    traverse cmd in cmds do
        watching cmd do
            <...>

            else/if cmd:SEQUENCE then
                traverse cmd:SEQUENCE.one;
                traverse cmd:SEQUENCE.two;

            <...>
        end
    end

    traverse cmd in cmds do
        watching cmd do
            if cmd:NOTHING then
                nothing;

            else/if cmd:ROTATE then
                do TurtleTurn with
                    this.turtle = turtle;
                    this.angle  = cmd:ROTATE.angle;
                end;

            else/if cmd:MOVE then
                do TurtleMove with
                    this.turtle = turtle;
                    this.pixels = cmd:MOVE.pixels;
                end;

            else/if cmd:SEQUENCE then
                traverse cmd:SEQUENCE.one;
                traverse cmd:SEQUENCE.two;

            else/if cmd:REPEAT then
                loop i in cmd:REPEAT.times do
                    traverse cmd:REPEAT.command;
                end
            end
        end
    end

    traverse cmd in cmds do
        watching cmd do
            <...>

            else/if cmd:ROTATE then
                do TurtleTurn with
                this.turtle = turtle;
                this.angle  = cmd:ROTATE.angle;
                end;

            <...>
        end
    end

    traverse cmd in cmds do
        watching cmd do
            <...>

            else/if cmd:AWAIT then
                await (cmd:AWAIT.ms) ms;

            else/if cmd:PAROR then
                par/or do
                    traverse cmd:PAROR.one;
                with
                    traverse cmd:PAROR.two;
                end

            <...>
        end
    end



    await FOREVER;
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&ren);
    end
end

escape 1;

